-- >>Explore all objects in the Database (Database Exploration)
select*
from INFORMATION_SCHEMA.TABLES;

-- Explore all columns in the Database
SELECT *
FROM INFORMATION_SCHEMA.COLUMNS;

-------------------------------------------------------------------
----------- Dimention Exploration ---------------------------------
-- Identify unique values in each dimention. Helps in understanding grouping used.
-- (Exploring gold.dim_customers)
SELECT DISTINCT country
FROM gold.dim_customers;

-- Explore all categories "Major Categories"
SELECT DISTINCT category, sub_category,product_name
FROM gold.dim_products
ORDER BY 1,2,3;
SELECT *
FROM gold.dim_products;

-------------------------------------------------------
-- > Date Exploration
-------------------------------------------------------
-- *Identify earliest and latest dates (date boundaries)
-- *Understand scope of data and timespan

SELECT CONCAT(first_name, last_name) AS customer_name, DATEDIFF(year, birth_date,GETDATE()) AS age
FROM gold.dim_customers
ORDER BY 2 DESC;--------------- > Returns customer name with their ages, strarting from the highes age.

-- Find the date of first and last order (gold.fact_sales)
-- How many years of sales are available
SELECT MIN(order_date) AS first_order_date, MAX(order_date) AS last_order_date,
DATEDIFF(YEAR, MIN(order_date), MAX(order_date)) AS order_range
FROM gold.fact_sales;

---------------------------------------------------------
-- > Measures Exploration
---------------------------------------------------------
-- Calculate the key metic of the business (Big numbers)
-- Highest level of aggregation (Lowest level of details)

-- Find the total sales
-- Find how many items are sold
-- Find the average selling price
-- Find the total number of orders
-- Find the total number of products
-- Find the total number of customers
-- Find te total number of customers that have placed an order

-- 
SELECT SUM(f.sales_amount) AS total_sales, SUM(f.quantity) AS total_items_sold, 
AVG(f.price) AS average_price, count(DISTINCT f.order_number) AS orders, COUNT(DISTINCT p.product_key) AS total_products,
COUNT(DISTINCT cu.customer_key) AS total_customers, COUNT(DISTINCT f.customer_key) AS customers_with_orders
from gold.fact_sales f
RIGHT JOIN gold.dim_customers cu ON f.customer_key=cu.customer_key
RIGHT JOIN gold.dim_products p ON f.product_key=p.product_key;

-- Summarized Report Generation
SELECT 'total_sales' AS measure_name, SUM(sales_amount) AS measure FROM gold.fact_sales
UNION ALL
SELECT 'total_items_sold', SUM(quantity) FROM gold.fact_sales
UNION ALL
SELECT 'average_price', AVG(price) FROM gold.fact_sales
UNION ALL
SELECT 'orders', COUNT(DISTINCT order_number) FROM gold.fact_sales
UNION ALL
SELECT 'total_products', COUNT(DISTINCT product_key) FROM gold.dim_products
UNION ALL
SELECT 'total_customers', COUNT(DISTINCT customer_key) FROM gold.dim_customers
UNION ALL
SELECT 'customers_with_orders', COUNT(DISTINCT customer_key) FROM gold.fact_sales


-----------------------------------------------------------
-- > Magnitude Analysis
-----------------------------------------------------------
-- * Compare the measure values
-- * It helps understand the importance of different categories

-- Find the total customers by county
SELECT country, COUNT(DISTINCT customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY country;

-- Find total customers by gender
SELECT gender, COUNT(DISTINCT customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY gender;
-- Find total products by category
SELECT category, COUNT(product_key)
FROM gold.dim_products
GROUP BY category;
-- What is the average cost in each category?
SELECT category, AVG(product_cost) AS average_cost
FROM gold.dim_products
GROUP BY category;
-- What is the total revenue generated in each category?
SELECT p.category, SUM(f.sales_amount)
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p ON f.product_key=p.product_key
GROUP BY p.category;
-- Find the total revenue generated by each customer.
SELECT c.customer_key, c.first_name,c.last_name, SUM(f.sales_amount) AS Revenue_generated
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c ON f.customer_key=c.customer_key
GROUP BY c.customer_key,c.first_name,c.last_name
ORDER BY Revenue_generated DESC;

-- What is the distribution of items sold accross countries?
SELECT p.product_name, c.country, SUM(f.quantity) AS product_quantity
FROM gold.dim_products p
RIGHT JOIN gold.fact_sales f ON p.product_key=f.product_key
RIGHT JOIN gold.dim_customers c ON f.customer_key=c.customer_key
GROUP BY product_name, c.country
ORDER BY c.country;

-------------------------------------------------------------------
-- RANKING ANALYSIS
-------------------------------------------------------------------
-- Rank [Dimention] By [Measure]
-- E.g Rank Countries by total_sales || Top 5 products by quantity || Bottom 3 customers by total_orders

-- Whch 5 products generate the highest revenue?
SELECT TOP(5) p.product_key, p.product_name, SUM(f.sales_amount) AS revenue_generated
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p ON  f.product_key=p.product_key
GROUP BY p.product_key, p.product_name
ORDER BY revenue_generated DESC;

-- Which are the 5 worst perfoming products by the sales
SELECT TOP(5) p.product_key, p.product_name, SUM(f.sales_amount) AS revenue_generated
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p ON  f.product_key=p.product_key
GROUP BY p.product_key, p.product_name
ORDER BY revenue_generated ASC;

-- Which are the top 5 best perfoming product categories
SELECT TOP(5) p.category, SUM(f.sales_amount) AS revenue_generated
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p ON  f.product_key=p.product_key
GROUP BY p.category
ORDER BY revenue_generated DESC;

-- > We can use window functions to do the same ranking analysis.
-- Find the top 10 customers who have generated the highest revenue
SELECT*
FROM
	(SELECT c.customer_key,
	c.first_name, 
	c.last_name,
	SUM(f.sales_amount) AS revenue_generated,
	ROW_NUMBER() OVER(ORDER BY SUM(f.sales_amount) DESC) AS ranking
	FROM gold.fact_sales f
	LEFT JOIN gold.dim_customers c ON f.customer_key=c.customer_key
	GROUP BY c.customer_key,c.first_name, c.last_name) t
WHERE ranking <=10;

-- Find 3 customers with fewest orders placed
SELECT*
FROM
	(SELECT 
	c.customer_key, 
	c.first_name,
	c.last_name, 
	COUNT(order_number) AS orders,
	ROW_NUMBER() OVER(ORDER BY COUNT(order_number) ASC) AS ranking
	FROM gold.fact_sales f
	LEFT JOIN gold.dim_customers c ON f.customer_key=c.customer_key
	GROUP BY c.customer_key, c.first_name,c.last_name) t
	WHERE ranking<=3;